def DATABASE1 = 'DEFCON 0'
def PIPELINE3 = 'AT THE STARTING LINE'
pipeline {

    agent any
    
    environment {
        DATABASE1 = 'ELNK_6'
        PIPELINE3 = 'AT THE STARTING LINE'
    }
    
    stages {
        stage('phase0: Build Release') {
            steps {
                echo "Validate Infrastructure Ready."
                script {
                   PIPELINE3 = sh(returnStderr: true, script: 'ping suns112')
                }
                echo "Code Extraction from SVN reprository."
                script {
                    build "J101"
                    sh 'printenv'
                }
                echo " Validate Hosts, ID and Permissions."
                script {
                   PIPELINE3 = sh(returnStderr: true, script: 'sql -d DATABASE1')
                }
                echo "ENV#0 ${PIPELINE3}"
                script {
                   PIPELINE3 = sh(returnStderr: true, script: 'ping svn-2')
                }
                echo "ENV#0 ${PIPELINE3}"
            }
        }   
        stage('phase1: Prep') {
            steps {
                echo "Prep for Legacy Data"
		script {
                  echo "Script: A) DC 400 extract – Customer Product information extracts -Tables identified as source for M6"
                  echo "Script: B) Wave extract – Customer product information extracts"
                  echo "Script: C) Stars Extract – Customer product information extracts"
		}
                echo "Load Legacy Data from Source"
                script {
                  echo "Script: E) EarthLink M6 Extract – Inventory extracts for TN Inventory and Circuits; Product extracts"
                  echo "Script: F) NGMSS Extract – Object cross references for circuits and customer accounts"
                }
		script {
                  echo "Script: D) Customer repository – Master repository used by all groups"
                  echo "Script: H) Transformation to Pre-stage product orders for completed and in-flight orders"
		}
                echo "Validate Legacy Data"
                sh 'printenv'
                sh 'echo "Validation and QA scripting executes here"'
            }
        }
        stage('phase2: Stage') {
            steps {
                echo sh(script: 'env', returnStdout: true)
                echo "Prep Staging Databases"
                echo "Load Staging Databases"
                script {
                    sh 'printenv'
                    echo "Script: I) Inventory staging phase - Transformation of TN inventory and circuit inventory for HPAE"
                    echo "Script: J) Completed order staging phase – Transformation of Products on complete orders"
                    echo "Script: K) In-Flight order staging phase – Transformation of Products on pending orders"
                }
                echo "Validate Staging Databases"
            }
        }
        stage('phase3: XREF') {
            steps {
                echo "Prep XREF"
                echo "Load XREF"
                script {
                     echo "Script: L) Load phase – Load of inventory (TNI & Circuits)"
                     echo "Script: M) Load phase – Load of PSR for completed orders"
                     echo "Script: N) Load phase – Load of PSR for pending orders"
                }
                echo "Validate XREF"
            }
        }
        stage('phase4: Transform') {
            steps {
                echo "Prep for Transformation"
                echo "Script: G) NGMSS Extract – Network System and Network connection extracts used for downgrade"
                echo "Script: O) Sync new items with NGMSS"
                echo "Execute Data Transformation"
                echo "Script: P) Sync with NGMSS – Sync of customer accounts, circuits and PSR s."
                echo "Script: Q) Reload of downgraded network system components"
                sh 'printenv'
            }
        }
        stage('phase5: UserTest') {
            steps {
                echo "Validate Transformation"
                echo "User Scripts Loaded."
                echo "QA Execution Engine Enabled"
                echo "QA UserTest Succeeds"
            }
        }
    }

    post {
        always {
            echo 'This will always run' 
            mail bcc: '', body: 'Performance Statistics', cc: '', from: 'jenkins', subject: 'Management Reporting', to: 'lgoldman@localhost'
        }
        success {
            echo 'This will run only if successful'
            mail bcc: '', body: 'High fives & happy faces!  :-)', cc: '', from: 'jenkins', subject: 'You are a winner!', to: 'lgoldman@localhost'
        }
        failure {
            echo 'This will run only if failed'
            mail bcc: '', body: '...Could be raining!', cc: '', from: 'jenkins', subject: 'Coud be worse...', to: 'lgoldman@localhost'
        }
        unstable {
            echo 'This will run only if the run was marked as unstable'
            mail bcc: '', body: 'A mind is a terrible thing to waste!  :-(', cc: '', from: 'jenkins', subject: 'Trouble in Paradise', to: 'lgoldman@localhost'
        }
        changed {
            echo 'This will run only if the state of the Pipeline has changed'
            echo 'For example, if the Pipeline was previously failing but is now successful'
            mail bcc: '', body: 'Calling the police!  :-|', cc: '', from: 'jenkins', subject: 'Foxes in the henhouse!', to: 'lgoldman@localhost'
        }
    }
}

